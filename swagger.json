{
  "swagger": "2.0",
  "info": {
    "version": "9.2.0.0",
    "title": "API Documentation"
  },
  "basePath": "/AppServer/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Single Entities",
      "description": "Create, read, update, and delete single entities"
    },
    {
      "name": "Collections",
      "description": "Query the system for a specific set of entities"
    },
    {
      "name": "Assignments",
      "description": "Handle assignments in member tables"
    },
    {
      "name": "Scripts",
      "description": "Run scripts"
    }
  ],
  "paths": {
    "/entities/{table}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get a list of entities",
        "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
        "parameters": [
          {
            "in": "path",
            "name": "table",
            "description": "Table name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "where",
            "description": "WHERE clause",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "whereKey",
            "description": "Predefined WHERE clause from QBMLimitedSQL",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "ORDER BY clause",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset of first item",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "displayColumns",
            "description": "Additional display columns, semicolon separated",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "loadType",
            "description": "Collection load type",
            "required": false,
            "type": "string",
            "default": "Default",
            "enum": [
              "Default",
              "Slim",
              "ForeignDisplays",
              "ForeignDisplaysForAllColumns",
              "BulkReadOnly",
              "LoadForeignDisplaysEvenWhenExpensive"
            ]
          },
          {
            "in": "query",
            "name": "noUrls",
            "description": "Do not return URLs for the entries",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection entry",
            "schema": {
              "$ref": "#/definitions/CollectionEntry"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Get a list of entities",
        "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
        "parameters": [
          {
            "in": "path",
            "name": "table",
            "description": "Table name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Query properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollectionQueryParms"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection entry",
            "schema": {
              "$ref": "#/definitions/CollectionEntry"
            }
          }
        }
      }
    },
    "/entity/{table}": {
      "post": {
        "tags": [
          "Single Entities"
        ],
        "summary": "Create a single entity",
        "parameters": [
          {
            "in": "path",
            "name": "table",
            "description": "Table name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Values to change",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SingleChangeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created new entity",
            "schema": {
              "$ref": "#/definitions/CreateSingleResult"
            }
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": [
          "Single Entities"
        ],
        "summary": "Create a batch of single entities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entities to insert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkChangeBodyInsert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created new entities",
            "schema": {
              "$ref": "#/definitions/CreateBulkResult"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Single Entities"
        ],
        "summary": "Update a batch of single entities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entities to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkChangeBodyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the entities",
            "schema": {
              "$ref": "#/definitions/ProcessIdResult"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Single Entities"
        ],
        "summary": "Delete a batch of single entities",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entities to delete",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkChangeBodyDelete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the entities",
            "schema": {
              "$ref": "#/definitions/ProcessIdResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CollectionQueryParms": {
      "properties": {
        "where": {
          "description": "WHERE clause",
          "type": "string"
        },
        "whereKey": {
          "description": "Predefined WHERE clause from QBMLimitedSQL",
          "type": "string"
        },
        "orderBy": {
          "description": "ORDER BY clause",
          "type": "string"
        },
        "offset": {
          "description": "Offset of first item",
          "type": "integer"
        },
        "limit": {
          "description": "Maximum number of results",
          "type": "integer",
          "format": "int32"
        },
        "displayColumns": {
          "description": "Additional display columns, semicolon separated",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "loadType": {
          "description": "Collection load type",
          "type": "string",
          "default": "Default",
          "enum": [
            "Default",
            "Slim",
            "ForeignDisplays",
            "ForeignDisplaysForAllColumns",
            "BulkReadOnly",
            "LoadForeignDisplaysEvenWhenExpensive"
          ]
        },
        "queryParameters": {
          "description": "Parameters to be used in WHERE clause",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "lastname": "Miller",
            "age": 42
          }
        },
        "queryByExample": {
          "description": "Sample values to filter the entries",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "lastname": "Einstein",
            "firstname": "Albert"
          }
        },
        "noUrls": {
          "description": "Do not return URLs for the entries",
          "type": "boolean"
        }
      }
    },
    "CollectionQueryCountParms": {
      "properties": {
        "where": {
          "description": "WHERE clause",
          "type": "string"
        },
        "whereKey": {
          "description": "Predefined WHERE clause from QBMLimitedSQL",
          "type": "string"
        },
        "queryParameters": {
          "description": "Parameters to be used in WHERE clause",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "lastname": "Miller",
            "age": 42
          }
        },
        "queryByExample": {
          "description": "Sample values to filter the entries",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "lastname": "Einstein",
            "firstname": "Albert"
          }
        }
      }
    },
    "CollectionEntry": {
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "display": {
          "type": "string"
        },
        "longDisplay": {
          "type": "string"
        },
        "values": {
          "$ref": "#/definitions/SampleValues"
        },
        "displayValues": {
          "$ref": "#/definitions/DisplayValues"
        }
      }
    },
    "SingleEntry": {
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "display": {
          "type": "string"
        },
        "values": {
          "$ref": "#/definitions/SampleValues"
        },
        "displayValues": {
          "$ref": "#/definitions/DisplayValues"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "SampleValues": {
      "properties": {
        "StringColumn": {
          "type": "string"
        },
        "IntColumn": {
          "type": "integer",
          "format": "int32"
        },
        "DateColumn": {
          "type": "string",
          "format": "date-time"
        },
        "DoubleColumn": {
          "type": "number",
          "format": "double",
          "example": 3.14
        },
        "BoolColumn": {
          "type": "boolean"
        }
      }
    },
    "DisplayValues": {
      "properties": {
        "Column1": {
          "type": "string",
          "example": "Display 1"
        },
        "Column2": {
          "type": "string",
          "example": "Display 2"
        }
      }
    },
    "SingleChangeBody": {
      "properties": {
        "values": {
          "$ref": "#/definitions/SampleValues"
        }
      }
    },
    "Members": {
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateSingleResult": {
      "properties": {
        "uid": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "state": {
          "type": "integer",
          "format": "int32"
        },
        "processId": {
          "type": "string"
        }
      }
    },
    "UpdateDeleteSingleResult": {
      "properties": {
        "state": {
          "type": "integer",
          "format": "int32"
        },
        "processId": {
          "type": "string"
        }
      }
    },
    "ProcessIdResult": {
      "properties": {
        "processId": {
          "type": "string"
        }
      }
    },
    "InsertEntity": {
      "required": [
        "table"
      ],
      "properties": {
        "table": {
          "type": "string"
        },
        "values": {
          "$ref": "#/definitions/SampleValues"
        }
      }
    },
    "UpdateEntity": {
      "required": [
        "table",
        "uid"
      ],
      "properties": {
        "table": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "values": {
          "$ref": "#/definitions/SampleValues"
        }
      }
    },
    "DeleteEntity": {
      "required": [
        "table",
        "uid"
      ],
      "properties": {
        "table": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "BulkChangeBodyInsert": {
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsertEntity"
          }
        }
      }
    },
    "BulkChangeBodyUpdate": {
      "properties": {
        "entities": {
          "type": "array",
          "description": "Entities to update",
          "items": {
            "$ref": "#/definitions/UpdateEntity"
          }
        },
        "insertMissing": {
          "type": "boolean",
          "description": "Insert entities that could not be found using the supplied keys.",
          "default": false
        }
      }
    },
    "BulkChangeBodyDelete": {
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeleteEntity"
          }
        }
      }
    },
    "UidAndUri": {
      "properties": {
        "uid": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "CreateBulkResult": {
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UidAndUri"
          }
        },
        "processId": {
          "type": "string"
        }
      }
    },
    "AssignmentResult": {
      "properties": {
        "assigned": {
          "type": "integer",
          "format": "int32"
        },
        "removed": {
          "type": "integer",
          "format": "int32"
        },
        "alreadyAssigned": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processId": {
          "type": "string"
        }
      }
    },
    "Link": {
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Parameters": {
      "properties": {
        "parameters": {
          "description": "Parameter values",
          "type": "array",
          "items": {
            "type": "object",
            "example": [
              "Parameter value",
              42,
              3,
              14
            ]
          }
        }
      }
    },
    "ScriptParameters": {
      "properties": {
        "parameters": {
          "description": "Parameter values",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Parameter value"
          }
        },
        "base": {
          "description": "Object key of base object",
          "type": "string",
          "example": "<Key><T>Person</T><P>00000000-0000-0000-0000-000000000000</P></Key"
        },
        "value": {
          "description": "Content of the Value variable in the script",
          "type": "object",
          "example": "Sample value"
        },
        "returnRawResult": {
          "description": "Allow to return the raw object or string as result",
          "type": "boolean",
          "example": false
        }
      }
    },
    "ScriptResult": {
      "properties": {
        "result": {
          "description": "Return value of the script",
          "type": "object"
        },
        "value": {
          "description": "Content of the Value variable in the script",
          "type": "object"
        }
      }
    },
    "GenerationParameters": {
      "properties": {
        "parameters": {
          "$ref": "#/definitions/SampleGenerationParameters"
        }
      }
    },
    "SampleGenerationParameters": {
      "properties": {
        "StringValue": {
          "type": "string"
        },
        "IntValue": {
          "type": "integer",
          "format": "int32"
        },
        "DateValue": {
          "type": "string",
          "format": "date-time"
        },
        "DoubleValue": {
          "type": "number",
          "format": "double",
          "example": 3.14
        },
        "BoolValue": {
          "type": "boolean"
        }
      }
    },
    "SessionVariableParameters": {
      "properties": {
        "value": {
          "description": "Value to set",
          "type": "object",
          "example": "Parameter value"
        },
        "clear": {
          "description": "Set to true if the session variable should be removed",
          "type": "boolean",
          "example": false
        }
      }
    },
    "SessionVariablesParameters": {
      "properties": {
        "variables": {
          "description": "Variables to set",
          "type": "object",
          "properties": {
            "StringValue": {
              "type": "string"
            },
            "IntValue": {
              "type": "integer",
              "format": "int32"
            },
            "BoolValue": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "SessionVariablesClearParameters": {
      "properties": {
        "variables": {
          "description": "Variables to remove",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DialogProcessResult": {
      "properties": {
        "id": {
          "description": "Process ID",
          "type": "string"
        },
        "objectKey": {
          "description": "Key of the base object of the process.",
          "type": "string"
        },
        "state": {
          "description": "Process state",
          "type": "string"
        },
        "created": {
          "description": "Process creation date",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "description": "Last update date of the process",
          "type": "string",
          "format": "date-time"
        },
        "display": {
          "description": "Process description",
          "type": "string"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        }
      }
    }
  }
}