{
    "swagger": "2.0",
    "info": {
        "version": "9.2.0.0",
        "title": "API Documentation"
    },
    "basePath": "/AppServer/api",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [
        {
            "name": "Single Entities",
            "description": "Create, read, update, and delete single entities"
        },
        {
            "name": "Collections",
            "description": "Query the system for a specific set of entities"
        },
        {
            "name": "Assignments",
            "description": "Handle assignments in member tables"
        },
        {
            "name": "Scripts",
            "description": "Run scripts"
        }
    ],
    "paths": {
        "/entities/{table}": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Get a list of entities",
                "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "WHERE clause",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "whereKey",
                        "description": "Predefined WHERE clause from QBMLimitedSQL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "ORDER BY clause",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset of first item",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Maximum number of results",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "displayColumns",
                        "description": "Additional display columns, semicolon separated",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "loadType",
                        "description": "Collection load type",
                        "required": false,
                        "type": "string",
                        "default": "Default",
                        "enum": [
                            "Default",
                            "Slim",
                            "ForeignDisplays",
                            "ForeignDisplaysForAllColumns",
                            "BulkReadOnly",
                            "LoadForeignDisplaysEvenWhenExpensive"
                        ]
                    },
                    {
                        "in": "query",
                        "name": "noUrls",
                        "description": "Do not return URLs for the entries",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection entry",
                        "schema": {
                            "$ref": "#/definitions/CollectionEntry"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Get a list of entities",
                "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Query properties",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionQueryParms"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection entry",
                        "schema": {
                            "$ref": "#/definitions/CollectionEntry"
                        }
                    }
                }
            }
        },
        "/entities/{table}/count": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Get the count of a list of entities",
                "description": "\"\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "WHERE clause",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "whereKey",
                        "description": "Predefined WHERE clause from QBMLimitedSQL",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count"
                    }
                }
            },
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Get the count of a list of entities",
                "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Query properties",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionQueryCountParms"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count"
                    }
                }
            }
        },
        "/entity/{table}": {
            "post": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Create a single entity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Values to change",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SingleChangeBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created new entity",
                        "schema": {
                            "$ref": "#/definitions/CreateSingleResult"
                        }
                    }
                }
            }
        },
        "/entity/{table}/{uid}": {
            "get": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Get a single entity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of this entity",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Single entity",
                        "schema": {
                            "$ref": "#/definitions/SingleEntry"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Change a single entity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of this entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Values to change",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SingleChangeBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity was changed",
                        "schema": {
                            "$ref": "#/definitions/UpdateDeleteSingleResult"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Delete a single entity",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of this entity",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity was deleted",
                        "schema": {
                            "$ref": "#/definitions/UpdateDeleteSingleResult"
                        }
                    }
                }
            }
        },
        "/entity/{table}/{uid}/method/{methodName}": {
            "put": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Call a method on an entity and save, if required",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of this entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "methodName",
                        "description": "Name of the method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Parameter values",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Parameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProcessIdResult"
                        }
                    }
                }
            }
        },
        "/entity/{table}/{uid}/event/{eventName}": {
            "put": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Generate an event for a specific object",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of this entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "eventName",
                        "description": "Name of the event",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Parameter values",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GenerationParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ProcessIdResult"
                        }
                    }
                }
            }
        },
        "/entities": {
            "post": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Create a batch of single entities",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Entities to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkChangeBodyInsert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created new entities",
                        "schema": {
                            "$ref": "#/definitions/CreateBulkResult"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Update a batch of single entities",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Entities to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkChangeBodyUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the entities",
                        "schema": {
                            "$ref": "#/definitions/ProcessIdResult"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Single Entities"
                ],
                "summary": "Delete a batch of single entities",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Entities to delete",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkChangeBodyDelete"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the entities",
                        "schema": {
                            "$ref": "#/definitions/ProcessIdResult"
                        }
                    }
                }
            }
        },
        "/assignments/{table}/{column}/{uid}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "summary": "Get assignments for a specific entity",
                "description": "\"It is possible to query by example. Simply provide the columns to query in the form Name=Value in the URL.\nQuery parameters to be used in WHERE clauses and predefined WHERE clauses can be provided in the form\n@paramname=value. Per default they have the type string. It is possible to specify other types like\nthis: @otherParam[int]=3.\"\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Member table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "column",
                        "description": "Column pointing to the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "description": "WHERE clause",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "whereKey",
                        "description": "Predefined WHERE clause from QBMLimitedSQL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "ORDER BY clause",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset of first item",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Maximum number of results",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "loadType",
                        "description": "Collection load type",
                        "required": false,
                        "type": "string",
                        "default": "Default",
                        "enum": [
                            "Default",
                            "Slim",
                            "ForeignDisplays"
                        ]
                    },
                    {
                        "in": "query",
                        "name": "displayColumns",
                        "description": "Additional display columns, semicolon separated",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "noUrls",
                        "description": "Do not return URLs for the entries",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of linked entities",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Link"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assignments"
                ],
                "summary": "Add assignments",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Member table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "column",
                        "description": "Column pointing to the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ignoreExisting",
                        "description": "Ignore exisiting entries, do not try to add them again.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "body",
                        "name": "members",
                        "description": "Guids of members to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Members"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of added assignments",
                        "schema": {
                            "$ref": "#/definitions/AssignmentResult"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Assignments"
                ],
                "summary": "Remove assignments",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Member table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "column",
                        "description": "Column pointing to the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Guid of the base entity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "members",
                        "description": "Guids of members to remove",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Members"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of removed assignments",
                        "schema": {
                            "$ref": "#/definitions/AssignmentResult"
                        }
                    }
                }
            }
        },
        "/script/{name}": {
            "put": {
                "tags": [
                    "Scripts"
                ],
                "summary": "Run a script. The script has to be tagged with a feature the user has permissions to use.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "Script name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Parameter values",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ScriptParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Script run successfully",
                        "schema": {
                            "$ref": "#/definitions/ScriptResult"
                        }
                    }
                }
            }
        },
        "/variable/{name}": {
            "put": {
                "tags": [
                    "Session Variables"
                ],
                "summary": "Set or remove a session variable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "Variable name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variable value or Delete flag",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionVariableParameters"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/variables": {
            "put": {
                "tags": [
                    "Session Variables"
                ],
                "summary": "Set a set of session variables",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variables to set",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionVariablesParameters"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/variables/clear": {
            "put": {
                "tags": [
                    "Session Variables"
                ],
                "summary": "Remove a set of session variables",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variables to remove",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionVariablesClearParameters"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/processinfo/{id}": {
            "get": {
                "tags": [
                    "Processes"
                ],
                "summary": "Get information about a running process.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Process ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Process information",
                        "schema": {
                            "$ref": "#/definitions/DialogProcessResult"
                        }
                    },
                    "404": {
                        "description": "Process was not found."
                    }
                }
            }
        },
        "/processfinished/{id}": {
            "get": {
                "tags": [
                    "Processes"
                ],
                "summary": "Get information if a running process was finished.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Process ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true if process was finished.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/processinfobykey/{table}/{uid}": {
            "get": {
                "tags": [
                    "Processes"
                ],
                "summary": "Get process information for a specific object.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "table",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "Primary key value",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Process information",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DialogProcessResult"
                            }
                        }
                    }
                }
            }
        },
        "/processinfobykey": {
            "get": {
                "tags": [
                    "Processes"
                ],
                "summary": "Get process information for a specific object.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "objectKey",
                        "description": "Object Key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Process information",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DialogProcessResult"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CollectionQueryParms": {
            "properties": {
                "where": {
                    "description": "WHERE clause",
                    "type": "string"
                },
                "whereKey": {
                    "description": "Predefined WHERE clause from QBMLimitedSQL",
                    "type": "string"
                },
                "orderBy": {
                    "description": "ORDER BY clause",
                    "type": "string"
                },
                "offset": {
                    "description": "Offset of first item",
                    "type": "integer"
                },
                "limit": {
                    "description": "Maximum number of results",
                    "type": "integer",
                    "format": "int32"
                },
                "displayColumns": {
                    "description": "Additional display columns, semicolon separated",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "loadType": {
                    "description": "Collection load type",
                    "type": "string",
                    "default": "Default",
                    "enum": [
                        "Default",
                        "Slim",
                        "ForeignDisplays",
                        "ForeignDisplaysForAllColumns",
                        "BulkReadOnly",
                        "LoadForeignDisplaysEvenWhenExpensive"
                    ]
                },
                "queryParameters": {
                    "description": "Parameters to be used in WHERE clause",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "lastname": "Miller",
                        "age": 42
                    }
                },
                "queryByExample": {
                    "description": "Sample values to filter the entries",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "lastname": "Einstein",
                        "firstname": "Albert"
                    }
                },
                "noUrls": {
                    "description": "Do not return URLs for the entries",
                    "type": "boolean"
                }
            }
        },
        "CollectionQueryCountParms": {
            "properties": {
                "where": {
                    "description": "WHERE clause",
                    "type": "string"
                },
                "whereKey": {
                    "description": "Predefined WHERE clause from QBMLimitedSQL",
                    "type": "string"
                },
                "queryParameters": {
                    "description": "Parameters to be used in WHERE clause",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "lastname": "Miller",
                        "age": 42
                    }
                },
                "queryByExample": {
                    "description": "Sample values to filter the entries",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "lastname": "Einstein",
                        "firstname": "Albert"
                    }
                }
            }
        },
        "CollectionEntry": {
            "required": [
                "uri"
            ],
            "properties": {
                "uri": {
                    "type": "string"
                },
                "display": {
                    "type": "string"
                },
                "longDisplay": {
                    "type": "string"
                },
                "values": {
                    "$ref": "#/definitions/SampleValues"
                },
                "displayValues": {
                    "$ref": "#/definitions/DisplayValues"
                }
            }
        },
        "SingleEntry": {
            "required": [
                "uri"
            ],
            "properties": {
                "uri": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "display": {
                    "type": "string"
                },
                "values": {
                    "$ref": "#/definitions/SampleValues"
                },
                "displayValues": {
                    "$ref": "#/definitions/DisplayValues"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "SampleValues": {
            "properties": {
                "StringColumn": {
                    "type": "string"
                },
                "IntColumn": {
                    "type": "integer",
                    "format": "int32"
                },
                "DateColumn": {
                    "type": "string",
                    "format": "date-time"
                },
                "DoubleColumn": {
                    "type": "number",
                    "format": "double",
                    "example": 3.14
                },
                "BoolColumn": {
                    "type": "boolean"
                }
            }
        },
        "DisplayValues": {
            "properties": {
                "Column1": {
                    "type": "string",
                    "example": "Display 1"
                },
                "Column2": {
                    "type": "string",
                    "example": "Display 2"
                }
            }
        },
        "SingleChangeBody": {
            "properties": {
                "values": {
                    "$ref": "#/definitions/SampleValues"
                }
            }
        },
        "Members": {
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CreateSingleResult": {
            "properties": {
                "uid": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "state": {
                    "type": "integer",
                    "format": "int32"
                },
                "processId": {
                    "type": "string"
                }
            }
        },
        "UpdateDeleteSingleResult": {
            "properties": {
                "state": {
                    "type": "integer",
                    "format": "int32"
                },
                "processId": {
                    "type": "string"
                }
            }
        },
        "ProcessIdResult": {
            "properties": {
                "processId": {
                    "type": "string"
                }
            }
        },
        "InsertEntity": {
            "required": [
                "table"
            ],
            "properties": {
                "table": {
                    "type": "string"
                },
                "values": {
                    "$ref": "#/definitions/SampleValues"
                }
            }
        },
        "UpdateEntity": {
            "required": [
                "table",
                "uid"
            ],
            "properties": {
                "table": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "values": {
                    "$ref": "#/definitions/SampleValues"
                }
            }
        },
        "DeleteEntity": {
            "required": [
                "table",
                "uid"
            ],
            "properties": {
                "table": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "BulkChangeBodyInsert": {
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InsertEntity"
                    }
                }
            }
        },
        "BulkChangeBodyUpdate": {
            "properties": {
                "entities": {
                    "type": "array",
                    "description": "Entities to update",
                    "items": {
                        "$ref": "#/definitions/UpdateEntity"
                    }
                },
                "insertMissing": {
                    "type": "boolean",
                    "description": "Insert entities that could not be found using the supplied keys.",
                    "default": false
                }
            }
        },
        "BulkChangeBodyDelete": {
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeleteEntity"
                    }
                }
            }
        },
        "UidAndUri": {
            "properties": {
                "uid": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "CreateBulkResult": {
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UidAndUri"
                    }
                },
                "processId": {
                    "type": "string"
                }
            }
        },
        "AssignmentResult": {
            "properties": {
                "assigned": {
                    "type": "integer",
                    "format": "int32"
                },
                "removed": {
                    "type": "integer",
                    "format": "int32"
                },
                "alreadyAssigned": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processId": {
                    "type": "string"
                }
            }
        },
        "Link": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "Parameters": {
            "properties": {
                "parameters": {
                    "description": "Parameter values",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "example": [
                            "Parameter value",
                            42,
                            3,
                            14
                        ]
                    }
                }
            }
        },
        "ScriptParameters": {
            "properties": {
                "parameters": {
                    "description": "Parameter values",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Parameter value"
                    }
                },
                "base": {
                    "description": "Object key of base object",
                    "type": "string",
                    "example": "<Key><T>Person</T><P>00000000-0000-0000-0000-000000000000</P></Key"
                },
                "value": {
                    "description": "Content of the Value variable in the script",
                    "type": "object",
                    "example": "Sample value"
                },
                "returnRawResult": {
                    "description": "Allow to return the raw object or string as result",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "ScriptResult": {
            "properties": {
                "result": {
                    "description": "Return value of the script",
                    "type": "object"
                },
                "value": {
                    "description": "Content of the Value variable in the script",
                    "type": "object"
                }
            }
        },
        "GenerationParameters": {
            "properties": {
                "parameters": {
                    "$ref": "#/definitions/SampleGenerationParameters"
                }
            }
        },
        "SampleGenerationParameters": {
            "properties": {
                "StringValue": {
                    "type": "string"
                },
                "IntValue": {
                    "type": "integer",
                    "format": "int32"
                },
                "DateValue": {
                    "type": "string",
                    "format": "date-time"
                },
                "DoubleValue": {
                    "type": "number",
                    "format": "double",
                    "example": 3.14
                },
                "BoolValue": {
                    "type": "boolean"
                }
            }
        },
        "SessionVariableParameters": {
            "properties": {
                "value": {
                    "description": "Value to set",
                    "type": "object",
                    "example": "Parameter value"
                },
                "clear": {
                    "description": "Set to true if the session variable should be removed",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "SessionVariablesParameters": {
            "properties": {
                "variables": {
                    "description": "Variables to set",
                    "type": "object",
                    "properties": {
                        "StringValue": {
                            "type": "string"
                        },
                        "IntValue": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "BoolValue": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "SessionVariablesClearParameters": {
            "properties": {
                "variables": {
                    "description": "Variables to remove",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DialogProcessResult": {
            "properties": {
                "id": {
                    "description": "Process ID",
                    "type": "string"
                },
                "objectKey": {
                    "description": "Key of the base object of the process.",
                    "type": "string"
                },
                "state": {
                    "description": "Process state",
                    "type": "string"
                },
                "created": {
                    "description": "Process creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "lastUpdated": {
                    "description": "Last update date of the process",
                    "type": "string",
                    "format": "date-time"
                },
                "display": {
                    "description": "Process description",
                    "type": "string"
                },
                "comment": {
                    "description": "Comment",
                    "type": "string"
                }
            }
        }
    }
}